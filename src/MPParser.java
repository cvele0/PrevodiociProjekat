
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Jan 13 15:51:10 CET 2023
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.ArrayList;

/** CUP v0.10k generated parser.
  * @version Fri Jan 13 15:51:10 CET 2023
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\003\006\000\002\004" +
    "\006\000\002\004\005\000\002\004\005\000\002\004\006" +
    "\000\002\004\004\000\002\007\004\000\002\007\003\000" +
    "\002\005\006\000\002\011\005\000\002\011\003\000\002" +
    "\011\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\010\004\000\002\010\003" +
    "\000\002\013\007\000\002\013\006\000\002\013\007\000" +
    "\002\013\007\000\002\013\006\000\002\013\005\000\002" +
    "\013\007\000\002\013\007\000\002\013\006\000\002\013" +
    "\005\000\002\013\003\000\002\013\007\000\002\013\006" +
    "\000\002\013\005\000\002\014\005\000\002\014\003\000" +
    "\002\015\005\000\002\015\003\000\002\016\005\000\002" +
    "\016\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\017\005\000\002\017\005\000\002\017\003\000" +
    "\002\021\005\000\002\021\005\000\002\021\003\000\002" +
    "\022\003\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\022\003\000\002\022\005\000\002\012\005" +
    "\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\004\005\001\002\000\004\002\145\001" +
    "\002\000\004\005\006\001\002\000\004\006\007\001\002" +
    "\000\004\007\010\001\002\000\016\007\010\010\017\014" +
    "\023\021\013\024\012\025\024\001\002\000\004\002\000" +
    "\001\002\000\004\005\136\001\002\000\014\007\010\014" +
    "\106\021\013\024\012\025\024\001\002\000\022\003\uffe4" +
    "\007\uffe4\010\uffe4\014\uffe4\021\uffe4\022\uffe4\024\uffe4\025" +
    "\uffe4\001\002\000\006\011\115\013\116\001\002\000\016" +
    "\007\010\010\112\014\023\021\013\024\012\025\024\001" +
    "\002\000\024\002\ufffb\003\ufffb\007\ufffb\010\ufffb\014\ufffb" +
    "\021\ufffb\022\ufffb\024\ufffb\025\ufffb\001\002\000\016\007" +
    "\010\010\104\014\023\021\013\024\012\025\024\001\002" +
    "\000\016\007\ufff9\010\ufff9\014\ufff9\021\ufff9\024\ufff9\025" +
    "\ufff9\001\002\000\022\003\uffef\007\uffef\010\uffef\014\uffef" +
    "\021\uffef\022\uffef\024\uffef\025\uffef\001\002\000\010\011" +
    "\ufff6\013\ufff6\023\100\001\002\000\004\005\025\001\002" +
    "\000\020\003\040\005\035\014\036\042\043\043\031\044" +
    "\034\045\033\001\002\000\010\003\073\006\074\013\072" +
    "\001\002\000\036\003\uffdb\006\uffdb\012\uffdb\013\uffdb\026" +
    "\uffdb\027\uffdb\030\065\031\060\032\062\033\066\034\063" +
    "\035\057\036\061\037\056\001\002\000\016\003\uffdf\006" +
    "\uffdf\012\uffdf\013\uffdf\026\uffdf\027\054\001\002\000\042" +
    "\003\uffcb\006\uffcb\012\uffcb\013\uffcb\026\uffcb\027\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb" +
    "\037\uffcb\040\uffcb\041\uffcb\001\002\000\012\003\uffc7\006" +
    "\uffc7\013\uffc7\026\051\001\002\000\042\003\uffcc\006\uffcc" +
    "\012\uffcc\013\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032" +
    "\uffcc\033\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\001\002\000\042\003\uffca\006\uffca\012\uffca\013" +
    "\uffca\026\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\001" +
    "\002\000\016\005\035\014\036\042\043\043\031\044\034" +
    "\045\033\001\002\000\042\003\uffce\006\uffce\012\uffce\013" +
    "\uffce\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce" +
    "\034\uffce\035\uffce\036\uffce\037\uffce\040\uffce\041\uffce\001" +
    "\002\000\042\003\uffd2\006\uffd2\012\uffd2\013\uffd2\026\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\036\uffd2\037\uffd2\040\044\041\045\001\002\000\022" +
    "\003\uffe5\007\uffe5\010\uffe5\014\uffe5\021\uffe5\022\uffe5\024" +
    "\uffe5\025\uffe5\001\002\000\042\003\uffcf\006\uffcf\012\uffcf" +
    "\013\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033" +
    "\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf" +
    "\001\002\000\016\003\uffdd\006\uffdd\012\uffdd\013\uffdd\026" +
    "\uffdd\027\uffdd\001\002\000\042\003\uffcd\006\uffcd\012\uffcd" +
    "\013\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033" +
    "\uffcd\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd" +
    "\001\002\000\016\005\035\014\036\042\043\043\031\044" +
    "\034\045\033\001\002\000\016\005\035\014\036\042\043" +
    "\043\031\044\034\045\033\001\002\000\042\003\uffd0\006" +
    "\uffd0\012\uffd0\013\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\040" +
    "\uffd0\041\uffd0\001\002\000\042\003\uffd1\006\uffd1\012\uffd1" +
    "\013\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\001\002\000\006\006\052\026\051\001\002\000\016\005" +
    "\035\014\036\042\043\043\031\044\034\045\033\001\002" +
    "\000\042\003\uffc9\006\uffc9\012\uffc9\013\uffc9\026\uffc9\027" +
    "\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9" +
    "\036\uffc9\037\uffc9\040\uffc9\041\uffc9\001\002\000\016\003" +
    "\uffe0\006\uffe0\012\uffe0\013\uffe0\026\uffe0\027\054\001\002" +
    "\000\016\005\035\014\036\042\043\043\031\044\034\045" +
    "\033\001\002\000\016\003\uffde\006\uffde\012\uffde\013\uffde" +
    "\026\uffde\027\uffde\001\002\000\016\005\035\014\036\042" +
    "\043\043\031\044\034\045\033\001\002\000\016\005\uffd5" +
    "\014\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\001\002\000" +
    "\016\005\uffd9\014\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9" +
    "\001\002\000\016\005\035\014\036\042\043\043\031\044" +
    "\034\045\033\001\002\000\016\005\uffd8\014\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\001\002\000\016\005\uffd6\014" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\001\002\000\016" +
    "\005\035\014\036\042\043\043\031\044\034\045\033\001" +
    "\002\000\016\005\uffda\014\uffda\042\uffda\043\uffda\044\uffda" +
    "\045\uffda\001\002\000\016\005\uffd7\014\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\001\002\000\022\003\uffdc\006\uffdc" +
    "\012\uffdc\013\uffdc\026\uffdc\027\uffdc\036\061\037\056\001" +
    "\002\000\042\003\uffd4\006\uffd4\012\uffd4\013\uffd4\026\uffd4" +
    "\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4\035" +
    "\uffd4\036\uffd4\037\uffd4\040\044\041\045\001\002\000\042" +
    "\003\uffd3\006\uffd3\012\uffd3\013\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\040\044\041\045\001\002\000\016\005\035\014" +
    "\036\042\043\043\031\044\034\045\033\001\002\000\022" +
    "\003\uffe6\007\uffe6\010\uffe6\014\uffe6\021\uffe6\022\uffe6\024" +
    "\uffe6\025\uffe6\001\002\000\006\003\076\012\075\001\002" +
    "\000\022\003\uffe8\007\uffe8\010\uffe8\014\uffe8\021\uffe8\022" +
    "\uffe8\024\uffe8\025\uffe8\001\002\000\022\003\uffe7\007\uffe7" +
    "\010\uffe7\014\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\001" +
    "\002\000\012\003\uffc8\006\uffc8\013\uffc8\026\051\001\002" +
    "\000\016\005\035\014\036\042\043\043\031\044\034\045" +
    "\033\001\002\000\006\012\102\026\051\001\002\000\022" +
    "\003\uffed\007\uffed\010\uffed\014\uffed\021\uffed\022\uffed\024" +
    "\uffed\025\uffed\001\002\000\016\007\010\010\107\014\106" +
    "\021\013\024\012\025\024\001\002\000\024\002\ufffe\003" +
    "\ufffe\007\ufffe\010\ufffe\014\ufffe\021\ufffe\022\ufffe\024\ufffe" +
    "\025\ufffe\001\002\000\016\007\ufffa\010\ufffa\014\ufffa\021" +
    "\ufffa\024\ufffa\025\ufffa\001\002\000\004\023\100\001\002" +
    "\000\024\002\uffff\003\uffff\007\uffff\010\uffff\014\uffff\021" +
    "\uffff\022\uffff\024\uffff\025\uffff\001\002\000\022\003\ufff0" +
    "\007\ufff0\010\ufff0\014\ufff0\021\ufff0\022\ufff0\024\ufff0\025" +
    "\ufff0\001\002\000\006\010\114\014\113\001\002\000\024" +
    "\002\ufffd\003\ufffd\007\ufffd\010\ufffd\014\ufffd\021\ufffd\022" +
    "\ufffd\024\ufffd\025\ufffd\001\002\000\012\003\ufff6\006\ufff6" +
    "\011\ufff6\013\ufff6\001\002\000\024\002\ufffc\003\ufffc\007" +
    "\ufffc\010\ufffc\014\ufffc\021\ufffc\022\ufffc\024\ufffc\025\ufffc" +
    "\001\002\000\012\015\125\016\124\017\122\020\123\001" +
    "\002\000\006\003\120\014\117\001\002\000\012\003\ufff7" +
    "\006\ufff7\011\ufff7\013\ufff7\001\002\000\012\003\ufff5\006" +
    "\ufff5\011\ufff5\013\ufff5\001\002\000\004\012\126\001\002" +
    "\000\004\012\ufff2\001\002\000\004\012\ufff1\001\002\000" +
    "\004\012\ufff3\001\002\000\004\012\ufff4\001\002\000\016" +
    "\007\ufff8\010\ufff8\014\ufff8\021\ufff8\024\ufff8\025\ufff8\001" +
    "\002\000\020\003\130\007\010\014\106\021\013\022\131" +
    "\024\012\025\024\001\002\000\022\003\uffe1\007\uffe1\010" +
    "\uffe1\014\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\001\002" +
    "\000\020\003\133\005\035\014\036\042\043\043\031\044" +
    "\034\045\033\001\002\000\010\003\134\012\135\026\051" +
    "\001\002\000\022\003\uffe2\007\uffe2\010\uffe2\014\uffe2\021" +
    "\uffe2\022\uffe2\024\uffe2\025\uffe2\001\002\000\022\003\uffe3" +
    "\007\uffe3\010\uffe3\014\uffe3\021\uffe3\022\uffe3\024\uffe3\025" +
    "\uffe3\001\002\000\022\003\uffee\007\uffee\010\uffee\014\uffee" +
    "\021\uffee\022\uffee\024\uffee\025\uffee\001\002\000\006\003" +
    "\137\014\113\001\002\000\022\003\uffe9\007\uffe9\010\uffe9" +
    "\014\uffe9\021\uffe9\022\uffe9\024\uffe9\025\uffe9\001\002\000" +
    "\010\003\141\006\142\013\116\001\002\000\022\003\uffea" +
    "\007\uffea\010\uffea\014\uffea\021\uffea\022\uffea\024\uffea\025" +
    "\uffea\001\002\000\006\003\144\012\143\001\002\000\022" +
    "\003\uffec\007\uffec\010\uffec\014\uffec\021\uffec\022\uffec\024" +
    "\uffec\025\uffec\001\002\000\022\003\uffeb\007\uffeb\010\uffeb" +
    "\014\uffeb\021\uffeb\022\uffeb\024\uffeb\025\uffeb\001\002\000" +
    "\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\143\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\010\001\001" +
    "\000\016\004\013\005\020\007\017\010\015\011\014\013" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\013\010\126\013\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\004\013\005\020\007\110\011\014" +
    "\013\107\001\001\000\002\001\001\000\014\004\013\005" +
    "\104\010\102\011\014\013\021\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\012\025\014\031\015\027\016\041\017\026\021\036" +
    "\022\040\001\001\000\002\001\001\000\004\020\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\014\047\015" +
    "\027\016\041\017\026\021\036\022\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\046" +
    "\001\001\000\004\022\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\015\052\016\041" +
    "\017\026\021\036\022\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\016\054\017\026\021\036\022\040" +
    "\001\001\000\002\001\001\000\006\021\070\022\040\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\021\067" +
    "\022\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\066\021\036\022\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\014\076\015\027\016\041\017\026" +
    "\021\036\022\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\014\100\015\027\016\041\017\026\021\036\022" +
    "\040\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\013\013\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\104\011\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\013\013\107\001\001\000\002\001\001\000\016\014\131" +
    "\015\027\016\041\017\026\021\036\022\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\137\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




   public int errNo = 0;

   public static void main( String[] args ) {
      try {
		   FileReader file = new FileReader(args[0]);
		   Scanner scanner = new MPLexer(file);

		   MPParser parser = new MPParser(scanner);
		   parser.parse();
	  }
	  catch (Exception e) {
		   System.out.println(e);
	  }
   }

   public void syntax_error(Symbol cur_token) {}

   public void report_error(String message, Object info) {
   	   System.out.print( message );
   }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ExpressionList ::= Expression 
            {
              ArrayList RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExpressionList ::= ExpressionList COMMA Expression 
            {
              ArrayList RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ExpressionList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Factor ::= OPENP Expression CLOSEP 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    RESULT=ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Factor ::= BOOLCONST 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    ex.type=MyVal._bool;
    RESULT=ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Factor ::= REALCONST 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    ex.type=MyVal._real;
    RESULT=ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Factor ::= CHARCONST 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    ex.type=MyVal._char;
    RESULT=ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Factor ::= INTCONST 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    ex.type=MyVal._int;
    RESULT=ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Factor ::= ID 
            {
              MyVal RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal id = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

    MyVal b = Table.getInstance().getVar(id.name);
    if (b == null) {
        System.out.println("Undeclared variable: Line: " + id.line);
        RESULT=id;
    }
    else {
        if (b.defined == -1) {
            System.out.println("Undefined value of variable: Line: " + id.line);
        }
        id.type = b.type;
        id.defined = b.defined;
        RESULT=id;
    }


              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Term ::= Factor 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT=ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Term ::= Term DIV Factor 
            {
              MyVal RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal ex1 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex2 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    if(ex1.type==MyVal._bool || ex2.type==MyVal._bool){
        System.out.println("Operands must be numeric: Line: "+ex1.line);
    }
    RESULT=ex1;
    if(RESULT.type<ex2.type)
            RESULT.type=ex2.type;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Term ::= Term MULT Factor 
            {
              MyVal RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal ex1 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex2 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    if(ex1.type==MyVal._bool || ex2.type==MyVal._bool){
        System.out.println("Operands must be numeric: Line: "+ex1.line);
    }
    RESULT=ex1;
    if(RESULT.type<ex2.type)
            RESULT.type=ex2.type;

              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ArExpression ::= Term 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ArExpression ::= ArExpression MINUS Term 
            {
              MyVal RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal ex1 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex2 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    if (ex1.type == MyVal._bool || ex2.type == MyVal._bool) {
        System.out.println("Operands must be numeric: Line: " + ex1.line);
    }
    RESULT = ex1;
    if (RESULT.type < ex2.type)
            RESULT.type = ex2.type;


              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ArExpression ::= ArExpression PLUS Term 
            {
              MyVal RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal ex1 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex2 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    if(ex1.type == MyVal._bool || ex2.type == MyVal._bool) {
        System.out.println("Operands must be numeric: Line: " + ex1.line);
    }
    RESULT = ex1;
    if (RESULT.type < ex2.type)
        RESULT.type = ex2.type;

              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*ArExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // RelOp ::= GRETEQ 
            {
              MyVal RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // RelOp ::= GRET 
            {
              MyVal RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // RelOp ::= DIFF 
            {
              MyVal RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // RelOp ::= ISEQ 
            {
              MyVal RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // RelOp ::= LESSEQ 
            {
              MyVal RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RelOp ::= LESS 
            {
              MyVal RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*RelOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RelExpression ::= ArExpression 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RelExpression ::= ArExpression RelOp ArExpression 
            {
              MyVal RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal ex1 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex2 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

    if (ex1.type == MyVal._bool || ex2.type == MyVal._bool)
        System.out.println("Operands must be numeric: Line: " + ex1.line);

    RESULT = ex1;
    RESULT.type = MyVal._bool;

              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*RelExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // AndExpression ::= RelExpression 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // AndExpression ::= AndExpression AND RelExpression 
            {
              MyVal RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal ex1 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex2 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    if (ex1.type != MyVal._bool || ex2.type != MyVal._bool)
        System.out.println("Operands must be bool: Line: " + ex1.line);

    RESULT = ex1;

              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= AndExpression 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = ex;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression OR AndExpression 
            {
              MyVal RESULT = null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal ex1 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int ex2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal ex2 = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

    if (ex1.type != MyVal._bool || ex2.type != MyVal._bool)
        System.out.println("Operands must be bool: Line: " + ex1.line);

    RESULT = ex1;

              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Statement ::= REPEAT StatementList error 
            {
              MyVal RESULT = null;
		int rpleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int rpright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal rp = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
    System.out.println("Missing until part in line " + rp.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Statement ::= REPEAT StatementList UNTIL error 
            {
              MyVal RESULT = null;
		int unleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int unright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal un = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Missing expression part in line " + un.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= REPEAT StatementList UNTIL Expression error 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Missing a comma in line " + ex.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= Block 
            {
              MyVal RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= WRITE OPENP error 
            {
              MyVal RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal op = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Invalid write function in line " + op.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= WRITE OPENP ExpressionList error 
            {
              MyVal RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal op = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
    System.out.println("Missing a closing bracket in line " + op.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= WRITE OPENP ExpressionList CLOSEP error 
            {
              MyVal RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal cl = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Missing a comma in line " + cl.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= WRITE OPENP ExpressionList CLOSEP SEMICOL 
            {
              MyVal RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= READ OPENP error 
            {
              MyVal RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal op = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Invalid read function in line " + op.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= READ OPENP NameList error 
            {
              MyVal RESULT = null;
		int opleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		MyVal op = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int nlistleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int nlistright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		ArrayList nlist = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    System.out.println("Missing closing bracket in line " + op.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= READ OPENP NameList CLOSEP error 
            {
              MyVal RESULT = null;
		int nlistleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nlistright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList nlist = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int clpleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int clpright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal clp = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    for (Object i: nlist) {
        MyVal p = (MyVal) i;

        MyVal b = Table.getInstance().getVar(p.name);

        if (b == null)
            System.out.println("Reading to undeclared variable: Line: " + clp.line);

        if (b != null) b.defined = clp.line;
    }
    System.out.println("Missing comma in line " + clp.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= READ OPENP NameList CLOSEP SEMICOL 
            {
              MyVal RESULT = null;
		int nlistleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nlistright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList nlist = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int clpleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int clpright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal clp = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		

    for (Object i: nlist) {
        MyVal p = (MyVal) i;

        MyVal b = Table.getInstance().getVar(p.name);

        if (b == null)
            System.out.println("Reading to undeclared variable: Line: " + clp.line);

        if (b != null) b.defined = clp.line;
    }


              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= ID ASGN Expression SEMICOL 
            {
              MyVal RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		MyVal id = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		

    MyVal var = Table.getInstance().getVar(id.name);
    if (var == null)
        System.out.println(id.name + " undeclared line: " + id.line);
    else {
        if (var.type == MyVal._bool) {
            if (ex.type != MyVal._bool)
                System.out.println("Cant convert types line:" + id.line);
        }
        else {
            if (ex.type == MyVal._bool)
                System.out.println("Cant convert types line:" + id.line);
        }

        var.defined = id.line;
    }


              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Statement ::= REPEAT StatementList UNTIL Expression SEMICOL 
            {
              MyVal RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal ex = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		

    if (ex.type != MyVal._bool)
        System.out.println("Expression not bool " + ex.line);


              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementList ::= Statement 
            {
              ArrayList RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StatementList ::= StatementList Statement 
            {
              ArrayList RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= BOOL 
            {
              MyVal RESULT = null;
		
    RESULT = new MyVal();
    RESULT.type = MyVal._bool;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= REAL 
            {
              MyVal RESULT = null;
		
    RESULT = new MyVal();
    RESULT.type = MyVal._real;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= CHAR 
            {
              MyVal RESULT = null;
		
    RESULT=new MyVal();
    RESULT.type = MyVal._char;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= INT 
            {
              MyVal RESULT = null;
		
    RESULT = new MyVal();
    RESULT.type = MyVal._int;

              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NameList ::= NameList COMMA error 
            {
              ArrayList RESULT = null;
		int nlistleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nlistright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList nlist = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int comright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal com = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
    RESULT = nlist;
    System.out.println("Missing a comma in line " + com.line);

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal id = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = new ArrayList<>();
    RESULT.add(id);

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int nlistleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nlistright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList nlist = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal id = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT = nlist;
    RESULT.add(id);

              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDecl ::= NameList COL Type SEMICOL 
            {
              MyVal RESULT = null;
		int nlistleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int nlistright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		ArrayList nlist = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal type = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		

    for (Object i: nlist) {
        ((MyVal) i).type = type.type;
        Table.getInstance().declare((MyVal) i);
    }


              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarList ::= VarDecl 
            {
              ArrayList RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarList ::= VarList VarDecl 
            {
              ArrayList RESULT = null;
		

              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*VarList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= OPENB CLOSEB 
            {
              MyVal RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= OPENB StatementList VarList CLOSEB 
            {
              MyVal RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Block ::= OPENB StatementList CLOSEB 
            {
              MyVal RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Block ::= OPENB VarList CLOSEB 
            {
              MyVal RESULT = null;

              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Block ::= OPENB VarList StatementList CLOSEB 
            {
              MyVal RESULT = null;
		int opcleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int opcright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		MyVal opc = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int clsleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int clsright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		MyVal cls = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

    Boolean p = Table.getInstance().exitBlock(opc.line);
    if (p)
        System.out.println("Varijabla vise puta deklarisana u bloku " + opc.line);

    System.out.println("Blok zavrsen " + cls.line);


              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= MAIN OPENP CLOSEP Block 
            {
              MyVal RESULT = null;
		
    System.out.println("Procitan program");

              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		MyVal start_val = (MyVal)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

